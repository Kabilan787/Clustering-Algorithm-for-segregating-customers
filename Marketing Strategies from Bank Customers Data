{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a0cd9fa0",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-05-17T08:47:57.540376Z",
     "iopub.status.busy": "2024-05-17T08:47:57.540040Z",
     "iopub.status.idle": "2024-05-17T08:47:59.355604Z",
     "shell.execute_reply": "2024-05-17T08:47:59.354685Z"
    },
    "papermill": {
     "duration": 1.827698,
     "end_time": "2024-05-17T08:47:59.357692",
     "exception": false,
     "start_time": "2024-05-17T08:47:57.529994",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "import time"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "fd4ee6f0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T08:47:59.376214Z",
     "iopub.status.busy": "2024-05-17T08:47:59.375739Z",
     "iopub.status.idle": "2024-05-17T08:47:59.380268Z",
     "shell.execute_reply": "2024-05-17T08:47:59.379001Z"
    },
    "papermill": {
     "duration": 0.01574,
     "end_time": "2024-05-17T08:47:59.382132",
     "exception": false,
     "start_time": "2024-05-17T08:47:59.366392",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "pd.set_option('display.max_columns', None)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "5265e730",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T08:47:59.400437Z",
     "iopub.status.busy": "2024-05-17T08:47:59.400059Z",
     "iopub.status.idle": "2024-05-17T08:47:59.507872Z",
     "shell.execute_reply": "2024-05-17T08:47:59.506893Z"
    },
    "papermill": {
     "duration": 0.119187,
     "end_time": "2024-05-17T08:47:59.509984",
     "exception": false,
     "start_time": "2024-05-17T08:47:59.390797",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GCIF                           object\n",
       "Area                           object\n",
       "Opening_Path                   object\n",
       "Vintage                        object\n",
       "Age                           float64\n",
       "Gender                         object\n",
       "Marital status                 object\n",
       "Number of children              int64\n",
       "Education                      object\n",
       "Product_Savings                 int64\n",
       "Product_Deposit                 int64\n",
       "Credit_Card_Product             int64\n",
       "Home_Credit_Product             int64\n",
       "Vehicle_Credit_Product          int64\n",
       "Products_Credit_Funds_Cash      int64\n",
       "Total_Ownership_Product         int64\n",
       "Annual_Income                   int64\n",
       "Total_Relationship_Balance      int64\n",
       "dtype: object"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "path_1 = \"/kaggle/input/bank-customer-data/clustering_data_from_url.csv\"\n",
    "data = pd.read_csv(path_1)\n",
    "data.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "8aa93d90",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T08:47:59.529843Z",
     "iopub.status.busy": "2024-05-17T08:47:59.529509Z",
     "iopub.status.idle": "2024-05-17T08:47:59.534903Z",
     "shell.execute_reply": "2024-05-17T08:47:59.534150Z"
    },
    "papermill": {
     "duration": 0.01647,
     "end_time": "2024-05-17T08:47:59.536402",
     "exception": false,
     "start_time": "2024-05-17T08:47:59.519932",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\"\\ndata.groupby(('Area'))['Area'].count()\\ndata.groupby(('Area')).mean()\\n\\ndata.groupby(('Vintage'))['Vintage'].count()\\ndata.groupby(('Vintage')).mean()\\n\\ndata.groupby(('Opening_Path'))['Opening_Path'].count()\\ndata.groupby(('Opening_Path')).mean()\\n\\ndata.groupby(('Marital status'))['Marital status'].count()\\ndata.groupby(('Marital status')).mean()\\n\""
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "'''\n",
    "data.groupby(('Area'))['Area'].count()\n",
    "data.groupby(('Area')).mean()\n",
    "\n",
    "data.groupby(('Vintage'))['Vintage'].count()\n",
    "data.groupby(('Vintage')).mean()\n",
    "\n",
    "data.groupby(('Opening_Path'))['Opening_Path'].count()\n",
    "data.groupby(('Opening_Path')).mean()\n",
    "\n",
    "data.groupby(('Marital status'))['Marital status'].count()\n",
    "data.groupby(('Marital status')).mean()\n",
    "'''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "20091c85",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T08:47:59.556304Z",
     "iopub.status.busy": "2024-05-17T08:47:59.555948Z",
     "iopub.status.idle": "2024-05-17T08:47:59.572588Z",
     "shell.execute_reply": "2024-05-17T08:47:59.571467Z"
    },
    "papermill": {
     "duration": 0.029253,
     "end_time": "2024-05-17T08:47:59.575068",
     "exception": false,
     "start_time": "2024-05-17T08:47:59.545815",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GCIF                             0\n",
       "Area                             0\n",
       "Opening_Path                     0\n",
       "Vintage                          0\n",
       "Age                           4045\n",
       "Gender                           0\n",
       "Marital status                   0\n",
       "Number of children               0\n",
       "Education                        0\n",
       "Product_Savings                  0\n",
       "Product_Deposit                  0\n",
       "Credit_Card_Product              0\n",
       "Home_Credit_Product              0\n",
       "Vehicle_Credit_Product           0\n",
       "Products_Credit_Funds_Cash       0\n",
       "Total_Ownership_Product          0\n",
       "Annual_Income                    0\n",
       "Total_Relationship_Balance       0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "557851f7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T08:47:59.594385Z",
     "iopub.status.busy": "2024-05-17T08:47:59.594027Z",
     "iopub.status.idle": "2024-05-17T08:47:59.613762Z",
     "shell.execute_reply": "2024-05-17T08:47:59.612495Z"
    },
    "papermill": {
     "duration": 0.032196,
     "end_time": "2024-05-17T08:47:59.616436",
     "exception": false,
     "start_time": "2024-05-17T08:47:59.584240",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "data = data.dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "34fcda4b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T08:47:59.637362Z",
     "iopub.status.busy": "2024-05-17T08:47:59.636988Z",
     "iopub.status.idle": "2024-05-17T08:47:59.650959Z",
     "shell.execute_reply": "2024-05-17T08:47:59.650143Z"
    },
    "papermill": {
     "duration": 0.026154,
     "end_time": "2024-05-17T08:47:59.652802",
     "exception": false,
     "start_time": "2024-05-17T08:47:59.626648",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GCIF                          0\n",
       "Area                          0\n",
       "Opening_Path                  0\n",
       "Vintage                       0\n",
       "Age                           0\n",
       "Gender                        0\n",
       "Marital status                0\n",
       "Number of children            0\n",
       "Education                     0\n",
       "Product_Savings               0\n",
       "Product_Deposit               0\n",
       "Credit_Card_Product           0\n",
       "Home_Credit_Product           0\n",
       "Vehicle_Credit_Product        0\n",
       "Products_Credit_Funds_Cash    0\n",
       "Total_Ownership_Product       0\n",
       "Annual_Income                 0\n",
       "Total_Relationship_Balance    0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f469307a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T08:47:59.671922Z",
     "iopub.status.busy": "2024-05-17T08:47:59.671558Z",
     "iopub.status.idle": "2024-05-17T08:47:59.700096Z",
     "shell.execute_reply": "2024-05-17T08:47:59.699139Z"
    },
    "papermill": {
     "duration": 0.040279,
     "end_time": "2024-05-17T08:47:59.702055",
     "exception": false,
     "start_time": "2024-05-17T08:47:59.661776",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Output: 0'"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.duplicated().sum()\n",
    "\n",
    "'''Output: 0'''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "16e4def6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T08:47:59.723176Z",
     "iopub.status.busy": "2024-05-17T08:47:59.722835Z",
     "iopub.status.idle": "2024-05-17T08:47:59.735580Z",
     "shell.execute_reply": "2024-05-17T08:47:59.734908Z"
    },
    "papermill": {
     "duration": 0.025531,
     "end_time": "2024-05-17T08:47:59.737383",
     "exception": false,
     "start_time": "2024-05-17T08:47:59.711852",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GCIF                          24084\n",
       "Area                          24084\n",
       "Opening_Path                  24084\n",
       "Vintage                       24084\n",
       "Age                           24084\n",
       "Gender                        24084\n",
       "Marital status                24084\n",
       "Number of children            24084\n",
       "Education                     24084\n",
       "Product_Savings               24084\n",
       "Product_Deposit               24084\n",
       "Credit_Card_Product           24084\n",
       "Home_Credit_Product           24084\n",
       "Vehicle_Credit_Product        24084\n",
       "Products_Credit_Funds_Cash    24084\n",
       "Total_Ownership_Product       24084\n",
       "Annual_Income                 24084\n",
       "Total_Relationship_Balance    24084\n",
       "dtype: int64"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "fcc4e3fb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T08:47:59.758314Z",
     "iopub.status.busy": "2024-05-17T08:47:59.757515Z",
     "iopub.status.idle": "2024-05-17T08:47:59.770845Z",
     "shell.execute_reply": "2024-05-17T08:47:59.769928Z"
    },
    "papermill": {
     "duration": 0.026125,
     "end_time": "2024-05-17T08:47:59.773124",
     "exception": false,
     "start_time": "2024-05-17T08:47:59.746999",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#Detecting and addressing outliers (for example, using Z-score)\n",
    "from scipy import stats\n",
    "z_scores =stats.zscore(data[['Age', 'Annual_Income', 'Total_Relationship_Balance']])\n",
    "data = data[(z_scores < 3).all(axis=1)] #Removing z-score > 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "02e79a41",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T08:47:59.793224Z",
     "iopub.status.busy": "2024-05-17T08:47:59.792881Z",
     "iopub.status.idle": "2024-05-17T08:47:59.806172Z",
     "shell.execute_reply": "2024-05-17T08:47:59.805351Z"
    },
    "papermill": {
     "duration": 0.025286,
     "end_time": "2024-05-17T08:47:59.807872",
     "exception": false,
     "start_time": "2024-05-17T08:47:59.782586",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GCIF                          23704\n",
       "Area                          23704\n",
       "Opening_Path                  23704\n",
       "Vintage                       23704\n",
       "Age                           23704\n",
       "Gender                        23704\n",
       "Marital status                23704\n",
       "Number of children            23704\n",
       "Education                     23704\n",
       "Product_Savings               23704\n",
       "Product_Deposit               23704\n",
       "Credit_Card_Product           23704\n",
       "Home_Credit_Product           23704\n",
       "Vehicle_Credit_Product        23704\n",
       "Products_Credit_Funds_Cash    23704\n",
       "Total_Ownership_Product       23704\n",
       "Annual_Income                 23704\n",
       "Total_Relationship_Balance    23704\n",
       "dtype: int64"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "6126350d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T08:47:59.827548Z",
     "iopub.status.busy": "2024-05-17T08:47:59.826983Z",
     "iopub.status.idle": "2024-05-17T08:47:59.834525Z",
     "shell.execute_reply": "2024-05-17T08:47:59.833395Z"
    },
    "papermill": {
     "duration": 0.019612,
     "end_time": "2024-05-17T08:47:59.836682",
     "exception": false,
     "start_time": "2024-05-17T08:47:59.817070",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "data0 = data[data['Opening_Path']=='Telemarketing']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "3074ea84",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T08:47:59.857785Z",
     "iopub.status.busy": "2024-05-17T08:47:59.857458Z",
     "iopub.status.idle": "2024-05-17T08:47:59.881599Z",
     "shell.execute_reply": "2024-05-17T08:47:59.880555Z"
    },
    "papermill": {
     "duration": 0.036924,
     "end_time": "2024-05-17T08:47:59.883272",
     "exception": false,
     "start_time": "2024-05-17T08:47:59.846348",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>Area</th>\n",
       "      <th>Vintage</th>\n",
       "      <th>Age</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Marital status</th>\n",
       "      <th>Number of children</th>\n",
       "      <th>Education</th>\n",
       "      <th>Product_Savings</th>\n",
       "      <th>Product_Deposit</th>\n",
       "      <th>Credit_Card_Product</th>\n",
       "      <th>Home_Credit_Product</th>\n",
       "      <th>Vehicle_Credit_Product</th>\n",
       "      <th>Products_Credit_Funds_Cash</th>\n",
       "      <th>Total_Ownership_Product</th>\n",
       "      <th>Annual_Income</th>\n",
       "      <th>Total_Relationship_Balance</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>Jakarta</td>\n",
       "      <td>&lt; 1 Year</td>\n",
       "      <td>23.0</td>\n",
       "      <td>Man</td>\n",
       "      <td>Not married yet</td>\n",
       "      <td>0</td>\n",
       "      <td>Doctor</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>198</td>\n",
       "      <td>10668586</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>Surabaya</td>\n",
       "      <td>&lt; 1 Year</td>\n",
       "      <td>30.0</td>\n",
       "      <td>Man</td>\n",
       "      <td>Not married yet</td>\n",
       "      <td>0</td>\n",
       "      <td>Doctor</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>280</td>\n",
       "      <td>299076075</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>Solo</td>\n",
       "      <td>&lt; 1 Year</td>\n",
       "      <td>29.0</td>\n",
       "      <td>Man</td>\n",
       "      <td>Not married yet</td>\n",
       "      <td>0</td>\n",
       "      <td>Doctor</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>295</td>\n",
       "      <td>76653088</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>Jakarta</td>\n",
       "      <td>&lt; 1 Year</td>\n",
       "      <td>49.0</td>\n",
       "      <td>Man</td>\n",
       "      <td>Not married yet</td>\n",
       "      <td>0</td>\n",
       "      <td>Doctor</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>443</td>\n",
       "      <td>247157199</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>Jakarta</td>\n",
       "      <td>&lt; 1 Year</td>\n",
       "      <td>21.0</td>\n",
       "      <td>Woman</td>\n",
       "      <td>Not married yet</td>\n",
       "      <td>0</td>\n",
       "      <td>Doctor</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>257</td>\n",
       "      <td>27585562</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   index      Area   Vintage   Age Gender   Marital status  \\\n",
       "0      0   Jakarta  < 1 Year  23.0    Man  Not married yet   \n",
       "1      1  Surabaya  < 1 Year  30.0    Man  Not married yet   \n",
       "2      2      Solo  < 1 Year  29.0    Man  Not married yet   \n",
       "3      3   Jakarta  < 1 Year  49.0    Man  Not married yet   \n",
       "4      4   Jakarta  < 1 Year  21.0  Woman  Not married yet   \n",
       "\n",
       "   Number of children Education  Product_Savings  Product_Deposit  \\\n",
       "0                   0    Doctor                1                0   \n",
       "1                   0    Doctor                1                0   \n",
       "2                   0    Doctor                1                0   \n",
       "3                   0    Doctor                1                0   \n",
       "4                   0    Doctor                1                0   \n",
       "\n",
       "   Credit_Card_Product  Home_Credit_Product  Vehicle_Credit_Product  \\\n",
       "0                    0                    0                       0   \n",
       "1                    0                    0                       0   \n",
       "2                    0                    0                       0   \n",
       "3                    0                    0                       0   \n",
       "4                    0                    0                       0   \n",
       "\n",
       "   Products_Credit_Funds_Cash  Total_Ownership_Product  Annual_Income  \\\n",
       "0                           0                        1            198   \n",
       "1                           0                        1            280   \n",
       "2                           0                        1            295   \n",
       "3                           0                        1            443   \n",
       "4                           0                        1            257   \n",
       "\n",
       "   Total_Relationship_Balance  \n",
       "0                    10668586  \n",
       "1                   299076075  \n",
       "2                    76653088  \n",
       "3                   247157199  \n",
       "4                    27585562  "
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data0 = data0.drop(columns=['GCIF', 'Opening_Path']).reset_index(drop=True)\n",
    "data0 = data0.reset_index()\n",
    "data0.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "78ab5c7d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T08:47:59.904898Z",
     "iopub.status.busy": "2024-05-17T08:47:59.904406Z",
     "iopub.status.idle": "2024-05-17T08:47:59.908759Z",
     "shell.execute_reply": "2024-05-17T08:47:59.908152Z"
    },
    "papermill": {
     "duration": 0.017468,
     "end_time": "2024-05-17T08:47:59.910256",
     "exception": false,
     "start_time": "2024-05-17T08:47:59.892788",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "data1 = data0.iloc[:, 1:8]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ab63a748",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T08:47:59.930327Z",
     "iopub.status.busy": "2024-05-17T08:47:59.929857Z",
     "iopub.status.idle": "2024-05-17T08:47:59.933693Z",
     "shell.execute_reply": "2024-05-17T08:47:59.933079Z"
    },
    "papermill": {
     "duration": 0.015568,
     "end_time": "2024-05-17T08:47:59.935347",
     "exception": false,
     "start_time": "2024-05-17T08:47:59.919779",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "data2 = data0.iloc[:, 8:17]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "51e5fb58",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T08:47:59.957021Z",
     "iopub.status.busy": "2024-05-17T08:47:59.956574Z",
     "iopub.status.idle": "2024-05-17T08:47:59.982163Z",
     "shell.execute_reply": "2024-05-17T08:47:59.981301Z"
    },
    "papermill": {
     "duration": 0.03829,
     "end_time": "2024-05-17T08:47:59.983803",
     "exception": false,
     "start_time": "2024-05-17T08:47:59.945513",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Age</th>\n",
       "      <th>Number of children</th>\n",
       "      <th>Area_Bandung</th>\n",
       "      <th>Area_Bogor</th>\n",
       "      <th>Area_Jakarta</th>\n",
       "      <th>Area_Jogja</th>\n",
       "      <th>Area_Solo</th>\n",
       "      <th>Area_Surabaya</th>\n",
       "      <th>Gender_Man</th>\n",
       "      <th>Gender_Woman</th>\n",
       "      <th>Marital status_Divorced</th>\n",
       "      <th>Marital status_Marry</th>\n",
       "      <th>Marital status_Not married yet</th>\n",
       "      <th>Education_Bachelor</th>\n",
       "      <th>Education_Doctor</th>\n",
       "      <th>Education_JUNIOR HIGH SCHOOL</th>\n",
       "      <th>Education_Masters</th>\n",
       "      <th>Education_No formal school</th>\n",
       "      <th>Education_SENIOR HIGH SCHOOL</th>\n",
       "      <th>Education_elementary school</th>\n",
       "      <th>Vintage_23 years</th>\n",
       "      <th>Vintage_&lt; 1 Year</th>\n",
       "      <th>Vintage_&gt; 4 Years</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>23.0</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>30.0</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>29.0</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>49.0</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>21.0</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Age  Number of children  Area_Bandung  Area_Bogor  Area_Jakarta  \\\n",
       "0  23.0                   0         False       False          True   \n",
       "1  30.0                   0         False       False         False   \n",
       "2  29.0                   0         False       False         False   \n",
       "3  49.0                   0         False       False          True   \n",
       "4  21.0                   0         False       False          True   \n",
       "\n",
       "   Area_Jogja  Area_Solo  Area_Surabaya  Gender_Man  Gender_Woman  \\\n",
       "0       False      False          False        True         False   \n",
       "1       False      False           True        True         False   \n",
       "2       False       True          False        True         False   \n",
       "3       False      False          False        True         False   \n",
       "4       False      False          False       False          True   \n",
       "\n",
       "   Marital status_Divorced  Marital status_Marry  \\\n",
       "0                    False                 False   \n",
       "1                    False                 False   \n",
       "2                    False                 False   \n",
       "3                    False                 False   \n",
       "4                    False                 False   \n",
       "\n",
       "   Marital status_Not married yet  Education_Bachelor  Education_Doctor  \\\n",
       "0                            True               False              True   \n",
       "1                            True               False              True   \n",
       "2                            True               False              True   \n",
       "3                            True               False              True   \n",
       "4                            True               False              True   \n",
       "\n",
       "   Education_JUNIOR HIGH SCHOOL  Education_Masters  \\\n",
       "0                         False              False   \n",
       "1                         False              False   \n",
       "2                         False              False   \n",
       "3                         False              False   \n",
       "4                         False              False   \n",
       "\n",
       "   Education_No formal school  Education_SENIOR HIGH SCHOOL  \\\n",
       "0                       False                         False   \n",
       "1                       False                         False   \n",
       "2                       False                         False   \n",
       "3                       False                         False   \n",
       "4                       False                         False   \n",
       "\n",
       "   Education_elementary school  Vintage_23 years  Vintage_< 1 Year  \\\n",
       "0                        False             False              True   \n",
       "1                        False             False              True   \n",
       "2                        False             False              True   \n",
       "3                        False             False              True   \n",
       "4                        False             False              True   \n",
       "\n",
       "   Vintage_> 4 Years  \n",
       "0              False  \n",
       "1              False  \n",
       "2              False  \n",
       "3              False  \n",
       "4              False  "
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data1 = pd.get_dummies(data1, columns=['Area', 'Gender', 'Marital status', 'Education', 'Vintage'])\n",
    "data1.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "948b96be",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T08:48:00.004374Z",
     "iopub.status.busy": "2024-05-17T08:48:00.004015Z",
     "iopub.status.idle": "2024-05-17T08:48:00.009925Z",
     "shell.execute_reply": "2024-05-17T08:48:00.009016Z"
    },
    "papermill": {
     "duration": 0.01797,
     "end_time": "2024-05-17T08:48:00.011475",
     "exception": false,
     "start_time": "2024-05-17T08:47:59.993505",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Product_Savings', 'Product_Deposit', 'Credit_Card_Product',\n",
       "       'Home_Credit_Product', 'Vehicle_Credit_Product',\n",
       "       'Products_Credit_Funds_Cash', 'Total_Ownership_Product',\n",
       "       'Annual_Income', 'Total_Relationship_Balance'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predname_num = data2.columns\n",
    "predname_num"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "d08c866c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T08:48:00.032702Z",
     "iopub.status.busy": "2024-05-17T08:48:00.031709Z",
     "iopub.status.idle": "2024-05-17T08:48:00.252150Z",
     "shell.execute_reply": "2024-05-17T08:48:00.251171Z"
    },
    "papermill": {
     "duration": 0.233281,
     "end_time": "2024-05-17T08:48:00.254325",
     "exception": false,
     "start_time": "2024-05-17T08:48:00.021044",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.315645</td>\n",
       "      <td>-1.220392</td>\n",
       "      <td>-0.695676</td>\n",
       "      <td>-1.184178</td>\n",
       "      <td>-0.436158</td>\n",
       "      <td>-1.121909</td>\n",
       "      <td>-2.057258</td>\n",
       "      <td>-1.256170</td>\n",
       "      <td>-1.607805</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.315645</td>\n",
       "      <td>-1.220392</td>\n",
       "      <td>-0.695676</td>\n",
       "      <td>-1.184178</td>\n",
       "      <td>-0.436158</td>\n",
       "      <td>-1.121909</td>\n",
       "      <td>-2.057258</td>\n",
       "      <td>-0.800973</td>\n",
       "      <td>0.410538</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.315645</td>\n",
       "      <td>-1.220392</td>\n",
       "      <td>-0.695676</td>\n",
       "      <td>-1.184178</td>\n",
       "      <td>-0.436158</td>\n",
       "      <td>-1.121909</td>\n",
       "      <td>-2.057258</td>\n",
       "      <td>-0.717705</td>\n",
       "      <td>-1.146030</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.315645</td>\n",
       "      <td>-1.220392</td>\n",
       "      <td>-0.695676</td>\n",
       "      <td>-1.184178</td>\n",
       "      <td>-0.436158</td>\n",
       "      <td>-1.121909</td>\n",
       "      <td>-2.057258</td>\n",
       "      <td>0.103871</td>\n",
       "      <td>0.047197</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.315645</td>\n",
       "      <td>-1.220392</td>\n",
       "      <td>-0.695676</td>\n",
       "      <td>-1.184178</td>\n",
       "      <td>-0.436158</td>\n",
       "      <td>-1.121909</td>\n",
       "      <td>-2.057258</td>\n",
       "      <td>-0.928650</td>\n",
       "      <td>-1.489416</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          0         1         2         3         4         5         6  \\\n",
       "0  0.315645 -1.220392 -0.695676 -1.184178 -0.436158 -1.121909 -2.057258   \n",
       "1  0.315645 -1.220392 -0.695676 -1.184178 -0.436158 -1.121909 -2.057258   \n",
       "2  0.315645 -1.220392 -0.695676 -1.184178 -0.436158 -1.121909 -2.057258   \n",
       "3  0.315645 -1.220392 -0.695676 -1.184178 -0.436158 -1.121909 -2.057258   \n",
       "4  0.315645 -1.220392 -0.695676 -1.184178 -0.436158 -1.121909 -2.057258   \n",
       "\n",
       "          7         8  \n",
       "0 -1.256170 -1.607805  \n",
       "1 -0.800973  0.410538  \n",
       "2 -0.717705 -1.146030  \n",
       "3  0.103871  0.047197  \n",
       "4 -0.928650 -1.489416  "
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.preprocessing import StandardScaler\n",
    "pt = StandardScaler()\n",
    "X_num = pd.DataFrame(pt.fit_transform(data2))\n",
    "X_num.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "273a09a2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T08:48:00.275203Z",
     "iopub.status.busy": "2024-05-17T08:48:00.274828Z",
     "iopub.status.idle": "2024-05-17T08:48:00.292742Z",
     "shell.execute_reply": "2024-05-17T08:48:00.291817Z"
    },
    "papermill": {
     "duration": 0.030385,
     "end_time": "2024-05-17T08:48:00.294607",
     "exception": false,
     "start_time": "2024-05-17T08:48:00.264222",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Product_Savings</th>\n",
       "      <th>Product_Deposit</th>\n",
       "      <th>Credit_Card_Product</th>\n",
       "      <th>Home_Credit_Product</th>\n",
       "      <th>Vehicle_Credit_Product</th>\n",
       "      <th>Products_Credit_Funds_Cash</th>\n",
       "      <th>Total_Ownership_Product</th>\n",
       "      <th>Annual_Income</th>\n",
       "      <th>Total_Relationship_Balance</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.315645</td>\n",
       "      <td>-1.220392</td>\n",
       "      <td>-0.695676</td>\n",
       "      <td>-1.184178</td>\n",
       "      <td>-0.436158</td>\n",
       "      <td>-1.121909</td>\n",
       "      <td>-2.057258</td>\n",
       "      <td>-1.256170</td>\n",
       "      <td>-1.607805</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.315645</td>\n",
       "      <td>-1.220392</td>\n",
       "      <td>-0.695676</td>\n",
       "      <td>-1.184178</td>\n",
       "      <td>-0.436158</td>\n",
       "      <td>-1.121909</td>\n",
       "      <td>-2.057258</td>\n",
       "      <td>-0.800973</td>\n",
       "      <td>0.410538</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.315645</td>\n",
       "      <td>-1.220392</td>\n",
       "      <td>-0.695676</td>\n",
       "      <td>-1.184178</td>\n",
       "      <td>-0.436158</td>\n",
       "      <td>-1.121909</td>\n",
       "      <td>-2.057258</td>\n",
       "      <td>-0.717705</td>\n",
       "      <td>-1.146030</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.315645</td>\n",
       "      <td>-1.220392</td>\n",
       "      <td>-0.695676</td>\n",
       "      <td>-1.184178</td>\n",
       "      <td>-0.436158</td>\n",
       "      <td>-1.121909</td>\n",
       "      <td>-2.057258</td>\n",
       "      <td>0.103871</td>\n",
       "      <td>0.047197</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.315645</td>\n",
       "      <td>-1.220392</td>\n",
       "      <td>-0.695676</td>\n",
       "      <td>-1.184178</td>\n",
       "      <td>-0.436158</td>\n",
       "      <td>-1.121909</td>\n",
       "      <td>-2.057258</td>\n",
       "      <td>-0.928650</td>\n",
       "      <td>-1.489416</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Product_Savings  Product_Deposit  Credit_Card_Product  Home_Credit_Product  \\\n",
       "0         0.315645        -1.220392            -0.695676            -1.184178   \n",
       "1         0.315645        -1.220392            -0.695676            -1.184178   \n",
       "2         0.315645        -1.220392            -0.695676            -1.184178   \n",
       "3         0.315645        -1.220392            -0.695676            -1.184178   \n",
       "4         0.315645        -1.220392            -0.695676            -1.184178   \n",
       "\n",
       "   Vehicle_Credit_Product  Products_Credit_Funds_Cash  \\\n",
       "0               -0.436158                   -1.121909   \n",
       "1               -0.436158                   -1.121909   \n",
       "2               -0.436158                   -1.121909   \n",
       "3               -0.436158                   -1.121909   \n",
       "4               -0.436158                   -1.121909   \n",
       "\n",
       "   Total_Ownership_Product  Annual_Income  Total_Relationship_Balance  \n",
       "0                -2.057258      -1.256170                   -1.607805  \n",
       "1                -2.057258      -0.800973                    0.410538  \n",
       "2                -2.057258      -0.717705                   -1.146030  \n",
       "3                -2.057258       0.103871                    0.047197  \n",
       "4                -2.057258      -0.928650                   -1.489416  "
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_num.columns = predname_num\n",
    "X_num.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "1eba97ea",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T08:48:00.316252Z",
     "iopub.status.busy": "2024-05-17T08:48:00.315785Z",
     "iopub.status.idle": "2024-05-17T08:48:00.333708Z",
     "shell.execute_reply": "2024-05-17T08:48:00.332611Z"
    },
    "papermill": {
     "duration": 0.031124,
     "end_time": "2024-05-17T08:48:00.335651",
     "exception": false,
     "start_time": "2024-05-17T08:48:00.304527",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "corrtest1 = data1.corr().abs()\n",
    "corrtest2 = X_num.corr().abs()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "27daa1b3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T08:48:00.357754Z",
     "iopub.status.busy": "2024-05-17T08:48:00.357411Z",
     "iopub.status.idle": "2024-05-17T08:48:00.371241Z",
     "shell.execute_reply": "2024-05-17T08:48:00.370319Z"
    },
    "papermill": {
     "duration": 0.027142,
     "end_time": "2024-05-17T08:48:00.372937",
     "exception": false,
     "start_time": "2024-05-17T08:48:00.345795",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#Removing redundant values ​​in the matrix\n",
    "upper1 = corrtest1.where(np.triu(np.ones(corrtest1.shape), k=1).astype(bool))\n",
    "upper2 = corrtest2.where(np.triu(np.ones(corrtest2.shape), k=1).astype(bool))\n",
    "\n",
    "#Mencari nilai yang berkorelasi di atas 0.7\n",
    "to_drop1 = [column for column in upper1.columns if any(upper1[column] > 0.7)]\n",
    "to_drop2 = [column for column in upper2.columns if any(upper2[column] > 0.7)]\n",
    "\n",
    "#menghapus kolom yang korelasinya >0.7\n",
    "data1 = data1.drop(to_drop1, axis=1)\n",
    "data2 = data1.drop(to_drop2, axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "d445e97d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T08:48:00.434012Z",
     "iopub.status.busy": "2024-05-17T08:48:00.433621Z",
     "iopub.status.idle": "2024-05-17T08:48:00.462614Z",
     "shell.execute_reply": "2024-05-17T08:48:00.461439Z"
    },
    "papermill": {
     "duration": 0.080983,
     "end_time": "2024-05-17T08:48:00.464255",
     "exception": false,
     "start_time": "2024-05-17T08:48:00.383272",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Age</th>\n",
       "      <th>Number of children</th>\n",
       "      <th>Area_Bandung</th>\n",
       "      <th>Area_Bogor</th>\n",
       "      <th>Area_Jakarta</th>\n",
       "      <th>Area_Jogja</th>\n",
       "      <th>Area_Solo</th>\n",
       "      <th>Area_Surabaya</th>\n",
       "      <th>Gender_Man</th>\n",
       "      <th>Marital status_Divorced</th>\n",
       "      <th>Marital status_Marry</th>\n",
       "      <th>Education_Bachelor</th>\n",
       "      <th>Education_Doctor</th>\n",
       "      <th>Education_JUNIOR HIGH SCHOOL</th>\n",
       "      <th>Education_Masters</th>\n",
       "      <th>Education_No formal school</th>\n",
       "      <th>Education_SENIOR HIGH SCHOOL</th>\n",
       "      <th>Education_elementary school</th>\n",
       "      <th>Vintage_23 years</th>\n",
       "      <th>Vintage_&lt; 1 Year</th>\n",
       "      <th>Vintage_&gt; 4 Years</th>\n",
       "      <th>Product_Savings</th>\n",
       "      <th>Product_Deposit</th>\n",
       "      <th>Credit_Card_Product</th>\n",
       "      <th>Home_Credit_Product</th>\n",
       "      <th>Vehicle_Credit_Product</th>\n",
       "      <th>Products_Credit_Funds_Cash</th>\n",
       "      <th>Total_Ownership_Product</th>\n",
       "      <th>Annual_Income</th>\n",
       "      <th>Total_Relationship_Balance</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>23.0</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>0.315645</td>\n",
       "      <td>-1.220392</td>\n",
       "      <td>-0.695676</td>\n",
       "      <td>-1.184178</td>\n",
       "      <td>-0.436158</td>\n",
       "      <td>-1.121909</td>\n",
       "      <td>-2.057258</td>\n",
       "      <td>-1.256170</td>\n",
       "      <td>-1.607805</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>30.0</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>0.315645</td>\n",
       "      <td>-1.220392</td>\n",
       "      <td>-0.695676</td>\n",
       "      <td>-1.184178</td>\n",
       "      <td>-0.436158</td>\n",
       "      <td>-1.121909</td>\n",
       "      <td>-2.057258</td>\n",
       "      <td>-0.800973</td>\n",
       "      <td>0.410538</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>29.0</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>0.315645</td>\n",
       "      <td>-1.220392</td>\n",
       "      <td>-0.695676</td>\n",
       "      <td>-1.184178</td>\n",
       "      <td>-0.436158</td>\n",
       "      <td>-1.121909</td>\n",
       "      <td>-2.057258</td>\n",
       "      <td>-0.717705</td>\n",
       "      <td>-1.146030</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>49.0</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>0.315645</td>\n",
       "      <td>-1.220392</td>\n",
       "      <td>-0.695676</td>\n",
       "      <td>-1.184178</td>\n",
       "      <td>-0.436158</td>\n",
       "      <td>-1.121909</td>\n",
       "      <td>-2.057258</td>\n",
       "      <td>0.103871</td>\n",
       "      <td>0.047197</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>21.0</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>0.315645</td>\n",
       "      <td>-1.220392</td>\n",
       "      <td>-0.695676</td>\n",
       "      <td>-1.184178</td>\n",
       "      <td>-0.436158</td>\n",
       "      <td>-1.121909</td>\n",
       "      <td>-2.057258</td>\n",
       "      <td>-0.928650</td>\n",
       "      <td>-1.489416</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8648</th>\n",
       "      <td>54.0</td>\n",
       "      <td>0</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>0.315645</td>\n",
       "      <td>0.819409</td>\n",
       "      <td>1.437451</td>\n",
       "      <td>0.844468</td>\n",
       "      <td>-0.436158</td>\n",
       "      <td>0.891338</td>\n",
       "      <td>1.797748</td>\n",
       "      <td>0.359225</td>\n",
       "      <td>0.568823</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8649</th>\n",
       "      <td>58.0</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>0.315645</td>\n",
       "      <td>0.819409</td>\n",
       "      <td>1.437451</td>\n",
       "      <td>0.844468</td>\n",
       "      <td>2.292747</td>\n",
       "      <td>-1.121909</td>\n",
       "      <td>1.797748</td>\n",
       "      <td>1.297376</td>\n",
       "      <td>-0.111517</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8650</th>\n",
       "      <td>42.0</td>\n",
       "      <td>3</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>0.315645</td>\n",
       "      <td>0.819409</td>\n",
       "      <td>1.437451</td>\n",
       "      <td>0.844468</td>\n",
       "      <td>-0.436158</td>\n",
       "      <td>0.891338</td>\n",
       "      <td>1.797748</td>\n",
       "      <td>0.892139</td>\n",
       "      <td>1.199907</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8651</th>\n",
       "      <td>44.0</td>\n",
       "      <td>1</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>0.315645</td>\n",
       "      <td>0.819409</td>\n",
       "      <td>-0.695676</td>\n",
       "      <td>0.844468</td>\n",
       "      <td>2.292747</td>\n",
       "      <td>0.891338</td>\n",
       "      <td>1.797748</td>\n",
       "      <td>-0.806524</td>\n",
       "      <td>-0.550539</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8652</th>\n",
       "      <td>33.0</td>\n",
       "      <td>2</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>0.315645</td>\n",
       "      <td>0.819409</td>\n",
       "      <td>1.437451</td>\n",
       "      <td>0.844468</td>\n",
       "      <td>2.292747</td>\n",
       "      <td>0.891338</td>\n",
       "      <td>2.761500</td>\n",
       "      <td>-0.323571</td>\n",
       "      <td>-0.659477</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8653 rows × 30 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       Age  Number of children  Area_Bandung  Area_Bogor  Area_Jakarta  \\\n",
       "0     23.0                   0         False       False          True   \n",
       "1     30.0                   0         False       False         False   \n",
       "2     29.0                   0         False       False         False   \n",
       "3     49.0                   0         False       False          True   \n",
       "4     21.0                   0         False       False          True   \n",
       "...    ...                 ...           ...         ...           ...   \n",
       "8648  54.0                   0          True       False         False   \n",
       "8649  58.0                   0         False       False          True   \n",
       "8650  42.0                   3          True       False         False   \n",
       "8651  44.0                   1         False       False         False   \n",
       "8652  33.0                   2         False       False         False   \n",
       "\n",
       "      Area_Jogja  Area_Solo  Area_Surabaya  Gender_Man  \\\n",
       "0          False      False          False        True   \n",
       "1          False      False           True        True   \n",
       "2          False       True          False        True   \n",
       "3          False      False          False        True   \n",
       "4          False      False          False       False   \n",
       "...          ...        ...            ...         ...   \n",
       "8648       False      False          False        True   \n",
       "8649       False      False          False        True   \n",
       "8650       False      False          False        True   \n",
       "8651        True      False          False        True   \n",
       "8652       False       True          False        True   \n",
       "\n",
       "      Marital status_Divorced  Marital status_Marry  Education_Bachelor  \\\n",
       "0                       False                 False               False   \n",
       "1                       False                 False               False   \n",
       "2                       False                 False               False   \n",
       "3                       False                 False               False   \n",
       "4                       False                 False               False   \n",
       "...                       ...                   ...                 ...   \n",
       "8648                    False                  True               False   \n",
       "8649                    False                 False               False   \n",
       "8650                     True                 False               False   \n",
       "8651                     True                 False               False   \n",
       "8652                    False                  True               False   \n",
       "\n",
       "      Education_Doctor  Education_JUNIOR HIGH SCHOOL  Education_Masters  \\\n",
       "0                 True                         False              False   \n",
       "1                 True                         False              False   \n",
       "2                 True                         False              False   \n",
       "3                 True                         False              False   \n",
       "4                 True                         False              False   \n",
       "...                ...                           ...                ...   \n",
       "8648             False                         False              False   \n",
       "8649             False                         False              False   \n",
       "8650             False                         False              False   \n",
       "8651             False                         False              False   \n",
       "8652             False                         False              False   \n",
       "\n",
       "      Education_No formal school  Education_SENIOR HIGH SCHOOL  \\\n",
       "0                          False                         False   \n",
       "1                          False                         False   \n",
       "2                          False                         False   \n",
       "3                          False                         False   \n",
       "4                          False                         False   \n",
       "...                          ...                           ...   \n",
       "8648                        True                         False   \n",
       "8649                        True                         False   \n",
       "8650                        True                         False   \n",
       "8651                        True                         False   \n",
       "8652                        True                         False   \n",
       "\n",
       "      Education_elementary school  Vintage_23 years  Vintage_< 1 Year  \\\n",
       "0                           False             False              True   \n",
       "1                           False             False              True   \n",
       "2                           False             False              True   \n",
       "3                           False             False              True   \n",
       "4                           False             False              True   \n",
       "...                           ...               ...               ...   \n",
       "8648                        False              True             False   \n",
       "8649                        False              True             False   \n",
       "8650                        False              True             False   \n",
       "8651                        False              True             False   \n",
       "8652                        False              True             False   \n",
       "\n",
       "      Vintage_> 4 Years  Product_Savings  Product_Deposit  \\\n",
       "0                 False         0.315645        -1.220392   \n",
       "1                 False         0.315645        -1.220392   \n",
       "2                 False         0.315645        -1.220392   \n",
       "3                 False         0.315645        -1.220392   \n",
       "4                 False         0.315645        -1.220392   \n",
       "...                 ...              ...              ...   \n",
       "8648              False         0.315645         0.819409   \n",
       "8649              False         0.315645         0.819409   \n",
       "8650              False         0.315645         0.819409   \n",
       "8651              False         0.315645         0.819409   \n",
       "8652              False         0.315645         0.819409   \n",
       "\n",
       "      Credit_Card_Product  Home_Credit_Product  Vehicle_Credit_Product  \\\n",
       "0               -0.695676            -1.184178               -0.436158   \n",
       "1               -0.695676            -1.184178               -0.436158   \n",
       "2               -0.695676            -1.184178               -0.436158   \n",
       "3               -0.695676            -1.184178               -0.436158   \n",
       "4               -0.695676            -1.184178               -0.436158   \n",
       "...                   ...                  ...                     ...   \n",
       "8648             1.437451             0.844468               -0.436158   \n",
       "8649             1.437451             0.844468                2.292747   \n",
       "8650             1.437451             0.844468               -0.436158   \n",
       "8651            -0.695676             0.844468                2.292747   \n",
       "8652             1.437451             0.844468                2.292747   \n",
       "\n",
       "      Products_Credit_Funds_Cash  Total_Ownership_Product  Annual_Income  \\\n",
       "0                      -1.121909                -2.057258      -1.256170   \n",
       "1                      -1.121909                -2.057258      -0.800973   \n",
       "2                      -1.121909                -2.057258      -0.717705   \n",
       "3                      -1.121909                -2.057258       0.103871   \n",
       "4                      -1.121909                -2.057258      -0.928650   \n",
       "...                          ...                      ...            ...   \n",
       "8648                    0.891338                 1.797748       0.359225   \n",
       "8649                   -1.121909                 1.797748       1.297376   \n",
       "8650                    0.891338                 1.797748       0.892139   \n",
       "8651                    0.891338                 1.797748      -0.806524   \n",
       "8652                    0.891338                 2.761500      -0.323571   \n",
       "\n",
       "      Total_Relationship_Balance  \n",
       "0                      -1.607805  \n",
       "1                       0.410538  \n",
       "2                      -1.146030  \n",
       "3                       0.047197  \n",
       "4                      -1.489416  \n",
       "...                          ...  \n",
       "8648                    0.568823  \n",
       "8649                   -0.111517  \n",
       "8650                    1.199907  \n",
       "8651                   -0.550539  \n",
       "8652                   -0.659477  \n",
       "\n",
       "[8653 rows x 30 columns]"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_combined = pd.concat([data1, X_num], axis=1, join='inner')\n",
    "data_combined"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "30f534e5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T08:48:00.486297Z",
     "iopub.status.busy": "2024-05-17T08:48:00.485937Z",
     "iopub.status.idle": "2024-05-17T08:48:00.835725Z",
     "shell.execute_reply": "2024-05-17T08:48:00.834672Z"
    },
    "papermill": {
     "duration": 0.363281,
     "end_time": "2024-05-17T08:48:00.837940",
     "exception": false,
     "start_time": "2024-05-17T08:48:00.474659",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#1 K-Means\n",
    "from sklearn.cluster import KMeans\n",
    "from sklearn.metrics import silhouette_score\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "f9341d80",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T08:48:00.862897Z",
     "iopub.status.busy": "2024-05-17T08:48:00.862555Z",
     "iopub.status.idle": "2024-05-17T08:48:06.754687Z",
     "shell.execute_reply": "2024-05-17T08:48:06.753265Z"
    },
    "papermill": {
     "duration": 5.906775,
     "end_time": "2024-05-17T08:48:06.756742",
     "exception": false,
     "start_time": "2024-05-17T08:48:00.849967",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Silhoutte Score (K-Means) -3 :0.4337305850807474\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Silhoutte Score (K-Means) -4 :0.41110815439319875\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Silhoutte Score (K-Means) -5 :0.3301428549027539\n"
     ]
    }
   ],
   "source": [
    "#Variasi hyperparameter (jumlah cluster)\n",
    "for n_clusters in range(3,6):\n",
    "  kmeans = KMeans(n_clusters = n_clusters, random_state=0)\n",
    "  cluster_labels = kmeans.fit_predict(data_combined)\n",
    "  silhouette_avg = silhouette_score(data_combined, cluster_labels)\n",
    "  print(\"Silhoutte Score (K-Means) -\" + str(n_clusters) +\" :\"+ str(silhouette_avg))\n",
    "  data0[\"Clustering_Kmeans_Exp0_\" + str(n_clusters)] = cluster_labels"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "a63a93f4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T08:48:06.780587Z",
     "iopub.status.busy": "2024-05-17T08:48:06.780259Z",
     "iopub.status.idle": "2024-05-17T08:48:12.052919Z",
     "shell.execute_reply": "2024-05-17T08:48:12.051967Z"
    },
    "papermill": {
     "duration": 5.286636,
     "end_time": "2024-05-17T08:48:12.054726",
     "exception": false,
     "start_time": "2024-05-17T08:48:06.768090",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Silhoutte Score (K-Means) -3 :0.4992848723778979\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Silhoutte Score (K-Means) -4 :0.48197433099245746\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Silhoutte Score (K-Means) -5 :0.4112410832278924\n"
     ]
    }
   ],
   "source": [
    "#Experiment 1\n",
    "for n_clusters in range(3,6):\n",
    "  kmeans = KMeans(n_clusters = n_clusters, random_state=0)\n",
    "  cluster_labels = kmeans.fit_predict(data1)\n",
    "  silhoutte_avg = silhouette_score(data1, cluster_labels)\n",
    "  print(\"Silhoutte Score (K-Means) -\" + str(n_clusters) +\" :\" +str(silhoutte_avg))\n",
    "  data0[\"Clustering_Kmeans_Exp1_\" + str(n_clusters)] = cluster_labels"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "d262eed5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T08:48:12.078666Z",
     "iopub.status.busy": "2024-05-17T08:48:12.078378Z",
     "iopub.status.idle": "2024-05-17T08:48:18.181855Z",
     "shell.execute_reply": "2024-05-17T08:48:18.180713Z"
    },
    "papermill": {
     "duration": 6.117267,
     "end_time": "2024-05-17T08:48:18.183557",
     "exception": false,
     "start_time": "2024-05-17T08:48:12.066290",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Silhoutte Score (K-Means) -3 :0.18408368480533616\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Silhoutte Score (K-Means) -4 :0.19019713858843065\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Silhoutte Score (K-Means) -5 :0.19917934939547233\n"
     ]
    }
   ],
   "source": [
    "for n_clusters in range(3,6):\n",
    "  kmeans = KMeans(n_clusters = n_clusters, random_state=0)\n",
    "  cluster_labels = kmeans.fit_predict(X_num)\n",
    "  silhoutte_avg = silhouette_score(X_num, cluster_labels)\n",
    "  print(\"Silhoutte Score (K-Means) -\" + str(n_clusters) +\" :\" +str(silhoutte_avg))\n",
    "  data0[\"Clustering_Kmeans_Exp2_\" + str(n_clusters)] = cluster_labels"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "23f0d014",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T08:48:18.208728Z",
     "iopub.status.busy": "2024-05-17T08:48:18.207918Z",
     "iopub.status.idle": "2024-05-17T08:48:18.845077Z",
     "shell.execute_reply": "2024-05-17T08:48:18.844164Z"
    },
    "papermill": {
     "duration": 0.651411,
     "end_time": "2024-05-17T08:48:18.846845",
     "exception": false,
     "start_time": "2024-05-17T08:48:18.195434",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.scatterplot(data=data0, x='Age', y='Total_Ownership_Product', hue='Clustering_Kmeans_Exp1_3', palette='Set1')\n",
    "plt.title('Scatter Plot Hasil CLustering')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "39ee7ab7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T08:48:18.872597Z",
     "iopub.status.busy": "2024-05-17T08:48:18.872325Z",
     "iopub.status.idle": "2024-05-17T08:48:19.493277Z",
     "shell.execute_reply": "2024-05-17T08:48:19.492502Z"
    },
    "papermill": {
     "duration": 0.63616,
     "end_time": "2024-05-17T08:48:19.495497",
     "exception": false,
     "start_time": "2024-05-17T08:48:18.859337",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.scatterplot(data=data0, x='Total_Relationship_Balance', y='Total_Ownership_Product', hue='Clustering_Kmeans_Exp1_3', palette='Set1')\n",
    "plt.title('Scatter Plot Hasil CLustering')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "24a17ccf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T08:48:19.524184Z",
     "iopub.status.busy": "2024-05-17T08:48:19.523354Z",
     "iopub.status.idle": "2024-05-17T08:48:19.534694Z",
     "shell.execute_reply": "2024-05-17T08:48:19.533339Z"
    },
    "papermill": {
     "duration": 0.027661,
     "end_time": "2024-05-17T08:48:19.536533",
     "exception": false,
     "start_time": "2024-05-17T08:48:19.508872",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "        Age  Number of children  Product_Savings  Product_Deposit  \\\n",
      "0      69.0                   3                1                0   \n",
      "1      23.0                   0                1                0   \n",
      "2      30.0                   0                1                0   \n",
      "3      45.0                   0                1                0   \n",
      "4      34.0                   0                1                0   \n",
      "...     ...                 ...              ...              ...   \n",
      "28121  41.0                   0                1                1   \n",
      "28122  28.0                   0                1                1   \n",
      "28123  52.0                   0                1                1   \n",
      "28124  47.0                   0                1                1   \n",
      "28126  58.0                   4                1                1   \n",
      "\n",
      "       Credit_Card_Product  Home_Credit_Product  Vehicle_Credit_Product  \\\n",
      "0                        0                    0                       0   \n",
      "1                        0                    0                       0   \n",
      "2                        0                    0                       0   \n",
      "3                        0                    0                       0   \n",
      "4                        0                    0                       0   \n",
      "...                    ...                  ...                     ...   \n",
      "28121                    1                    1                       1   \n",
      "28122                    1                    1                       1   \n",
      "28123                    1                    1                       1   \n",
      "28124                    1                    1                       1   \n",
      "28126                    1                    1                       1   \n",
      "\n",
      "       Products_Credit_Funds_Cash  Total_Ownership_Product  \\\n",
      "0                               0                        1   \n",
      "1                               0                        1   \n",
      "2                               0                        1   \n",
      "3                               0                        1   \n",
      "4                               0                        1   \n",
      "...                           ...                      ...   \n",
      "28121                           1                        6   \n",
      "28122                           1                        6   \n",
      "28123                           1                        6   \n",
      "28124                           1                        6   \n",
      "28126                           1                        6   \n",
      "\n",
      "       Total_Relationship_Balance  \n",
      "0                           44607  \n",
      "1                        10668586  \n",
      "2                       299076075  \n",
      "3                       417250579  \n",
      "4                       453573593  \n",
      "...                           ...  \n",
      "28121                   167993431  \n",
      "28122                   189632802  \n",
      "28123                   166478751  \n",
      "28124                   600734753  \n",
      "28126                   629634394  \n",
      "\n",
      "[23704 rows x 10 columns]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<module 'pandas' from '/opt/conda/lib/python3.10/site-packages/pandas/__init__.py'>"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cluster_means = data[['Age', 'Number of children', 'Product_Savings', 'Product_Deposit', 'Credit_Card_Product', 'Home_Credit_Product', 'Vehicle_Credit_Product', 'Products_Credit_Funds_Cash', 'Total_Ownership_Product', 'Total_Relationship_Balance']]\n",
    "print(cluster_means)\n",
    "pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "4acb8bd2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T08:48:19.566045Z",
     "iopub.status.busy": "2024-05-17T08:48:19.565163Z",
     "iopub.status.idle": "2024-05-17T08:48:19.583561Z",
     "shell.execute_reply": "2024-05-17T08:48:19.582652Z"
    },
    "papermill": {
     "duration": 0.034931,
     "end_time": "2024-05-17T08:48:19.585325",
     "exception": false,
     "start_time": "2024-05-17T08:48:19.550394",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Age</th>\n",
       "      <th>Number of children</th>\n",
       "      <th>Total_Ownership_Product</th>\n",
       "      <th>Total_Relationship_Balance</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>2679.000000</td>\n",
       "      <td>2679.000000</td>\n",
       "      <td>2679.000000</td>\n",
       "      <td>2.679000e+03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>57.341172</td>\n",
       "      <td>1.465472</td>\n",
       "      <td>2.972378</td>\n",
       "      <td>2.375921e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>5.457288</td>\n",
       "      <td>1.481597</td>\n",
       "      <td>1.053100</td>\n",
       "      <td>1.387353e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>51.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.028000e+03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>53.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.219935e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>56.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>2.322244e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>60.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>3.489927e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>70.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>7.181097e+08</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               Age  Number of children  Total_Ownership_Product  \\\n",
       "count  2679.000000         2679.000000              2679.000000   \n",
       "mean     57.341172            1.465472                 2.972378   \n",
       "std       5.457288            1.481597                 1.053100   \n",
       "min      51.000000            0.000000                 1.000000   \n",
       "25%      53.000000            0.000000                 2.000000   \n",
       "50%      56.000000            1.000000                 3.000000   \n",
       "75%      60.000000            3.000000                 4.000000   \n",
       "max      70.000000            4.000000                 6.000000   \n",
       "\n",
       "       Total_Relationship_Balance  \n",
       "count                2.679000e+03  \n",
       "mean                 2.375921e+08  \n",
       "std                  1.387353e+08  \n",
       "min                  1.028000e+03  \n",
       "25%                  1.219935e+08  \n",
       "50%                  2.322244e+08  \n",
       "75%                  3.489927e+08  \n",
       "max                  7.181097e+08  "
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data0[data0['Clustering_Kmeans_Exp1_3']==0][['Age', 'Number of children', 'Total_Ownership_Product', 'Total_Relationship_Balance']].describe(include='all')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "7f1b169c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T08:48:19.614421Z",
     "iopub.status.busy": "2024-05-17T08:48:19.614131Z",
     "iopub.status.idle": "2024-05-17T08:48:19.624437Z",
     "shell.execute_reply": "2024-05-17T08:48:19.623571Z"
    },
    "papermill": {
     "duration": 0.027191,
     "end_time": "2024-05-17T08:48:19.626448",
     "exception": false,
     "start_time": "2024-05-17T08:48:19.599257",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Area\n",
       "Jakarta     0.482270\n",
       "Bandung     0.164987\n",
       "Surabaya    0.126166\n",
       "Solo        0.123180\n",
       "Jogja       0.073535\n",
       "Bogor       0.029862\n",
       "Name: proportion, dtype: float64"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data0[data0['Clustering_Kmeans_Exp1_3']==0]['Area'].value_counts(normalize=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "49c8d425",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T08:48:19.656128Z",
     "iopub.status.busy": "2024-05-17T08:48:19.655548Z",
     "iopub.status.idle": "2024-05-17T08:48:19.664193Z",
     "shell.execute_reply": "2024-05-17T08:48:19.663381Z"
    },
    "papermill": {
     "duration": 0.025199,
     "end_time": "2024-05-17T08:48:19.665889",
     "exception": false,
     "start_time": "2024-05-17T08:48:19.640690",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Vintage\n",
       "23 years     0.488242\n",
       "< 1 Year     0.309444\n",
       "> 4 Years    0.202314\n",
       "Name: proportion, dtype: float64"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data0[data0['Clustering_Kmeans_Exp1_3']==0]['Vintage'].value_counts(normalize=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "b78a01e7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T08:48:19.695237Z",
     "iopub.status.busy": "2024-05-17T08:48:19.694919Z",
     "iopub.status.idle": "2024-05-17T08:48:19.704167Z",
     "shell.execute_reply": "2024-05-17T08:48:19.703066Z"
    },
    "papermill": {
     "duration": 0.025949,
     "end_time": "2024-05-17T08:48:19.706092",
     "exception": false,
     "start_time": "2024-05-17T08:48:19.680143",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Education\n",
       "Bachelor              0.262785\n",
       "elementary school     0.197835\n",
       "SENIOR HIGH SCHOOL    0.181038\n",
       "No formal school      0.104517\n",
       "Doctor                0.087719\n",
       "JUNIOR HIGH SCHOOL    0.083240\n",
       "Masters               0.082867\n",
       "Name: proportion, dtype: float64"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data0[data0['Clustering_Kmeans_Exp1_3']==0]['Education'].value_counts(normalize=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "4585178a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T08:48:19.736985Z",
     "iopub.status.busy": "2024-05-17T08:48:19.736634Z",
     "iopub.status.idle": "2024-05-17T08:48:19.746564Z",
     "shell.execute_reply": "2024-05-17T08:48:19.745680Z"
    },
    "papermill": {
     "duration": 0.027859,
     "end_time": "2024-05-17T08:48:19.748844",
     "exception": false,
     "start_time": "2024-05-17T08:48:19.720985",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Gender\n",
       "Man      0.674879\n",
       "Woman    0.325121\n",
       "Name: proportion, dtype: float64"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data0[data0['Clustering_Kmeans_Exp1_3']==0]['Gender'].value_counts(normalize=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "c73296f0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T08:48:19.779020Z",
     "iopub.status.busy": "2024-05-17T08:48:19.778707Z",
     "iopub.status.idle": "2024-05-17T08:48:19.797003Z",
     "shell.execute_reply": "2024-05-17T08:48:19.796169Z"
    },
    "papermill": {
     "duration": 0.035164,
     "end_time": "2024-05-17T08:48:19.798670",
     "exception": false,
     "start_time": "2024-05-17T08:48:19.763506",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Age</th>\n",
       "      <th>Number of children</th>\n",
       "      <th>Total_Ownership_Product</th>\n",
       "      <th>Total_Relationship_Balance</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>3159.000000</td>\n",
       "      <td>3159.000000</td>\n",
       "      <td>3159.000000</td>\n",
       "      <td>3.159000e+03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>29.156695</td>\n",
       "      <td>1.204495</td>\n",
       "      <td>3.252928</td>\n",
       "      <td>2.442857e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>4.027826</td>\n",
       "      <td>1.482204</td>\n",
       "      <td>1.008970</td>\n",
       "      <td>1.455044e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>20.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.016565e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>26.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>1.229665e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>29.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>2.411094e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>32.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>3.578932e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>36.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>7.228870e+08</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               Age  Number of children  Total_Ownership_Product  \\\n",
       "count  3159.000000         3159.000000              3159.000000   \n",
       "mean     29.156695            1.204495                 3.252928   \n",
       "std       4.027826            1.482204                 1.008970   \n",
       "min      20.000000            0.000000                 1.000000   \n",
       "25%      26.000000            0.000000                 3.000000   \n",
       "50%      29.000000            0.000000                 3.000000   \n",
       "75%      32.000000            2.000000                 4.000000   \n",
       "max      36.000000            4.000000                 6.000000   \n",
       "\n",
       "       Total_Relationship_Balance  \n",
       "count                3.159000e+03  \n",
       "mean                 2.442857e+08  \n",
       "std                  1.455044e+08  \n",
       "min                  1.016565e+06  \n",
       "25%                  1.229665e+08  \n",
       "50%                  2.411094e+08  \n",
       "75%                  3.578932e+08  \n",
       "max                  7.228870e+08  "
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data0[data0['Clustering_Kmeans_Exp1_3']==1][['Age', 'Number of children', 'Total_Ownership_Product', 'Total_Relationship_Balance']].describe(include='all')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "eb779f56",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T08:48:19.829269Z",
     "iopub.status.busy": "2024-05-17T08:48:19.828442Z",
     "iopub.status.idle": "2024-05-17T08:48:19.837969Z",
     "shell.execute_reply": "2024-05-17T08:48:19.837264Z"
    },
    "papermill": {
     "duration": 0.026809,
     "end_time": "2024-05-17T08:48:19.840015",
     "exception": false,
     "start_time": "2024-05-17T08:48:19.813206",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Area\n",
       "Jakarta     0.477366\n",
       "Bandung     0.180753\n",
       "Surabaya    0.125040\n",
       "Solo        0.117126\n",
       "Jogja       0.073441\n",
       "Bogor       0.026274\n",
       "Name: proportion, dtype: float64"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data0[data0['Clustering_Kmeans_Exp1_3']==1]['Area'].value_counts(normalize=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "83b7666a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T08:48:19.869842Z",
     "iopub.status.busy": "2024-05-17T08:48:19.869363Z",
     "iopub.status.idle": "2024-05-17T08:48:19.876963Z",
     "shell.execute_reply": "2024-05-17T08:48:19.876388Z"
    },
    "papermill": {
     "duration": 0.023898,
     "end_time": "2024-05-17T08:48:19.878363",
     "exception": false,
     "start_time": "2024-05-17T08:48:19.854465",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Vintage\n",
       "23 years     0.500475\n",
       "< 1 Year     0.294080\n",
       "> 4 Years    0.205445\n",
       "Name: proportion, dtype: float64"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data0[data0['Clustering_Kmeans_Exp1_3']==1]['Vintage'].value_counts(normalize=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "ce7b999c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T08:48:19.907255Z",
     "iopub.status.busy": "2024-05-17T08:48:19.906963Z",
     "iopub.status.idle": "2024-05-17T08:48:19.914554Z",
     "shell.execute_reply": "2024-05-17T08:48:19.913974Z"
    },
    "papermill": {
     "duration": 0.023673,
     "end_time": "2024-05-17T08:48:19.915916",
     "exception": false,
     "start_time": "2024-05-17T08:48:19.892243",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Education\n",
       "Bachelor              0.274770\n",
       "SENIOR HIGH SCHOOL    0.191833\n",
       "elementary school     0.178854\n",
       "Doctor                0.100665\n",
       "Masters               0.087053\n",
       "JUNIOR HIGH SCHOOL    0.084837\n",
       "No formal school      0.081988\n",
       "Name: proportion, dtype: float64"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data0[data0['Clustering_Kmeans_Exp1_3']==1]['Education'].value_counts(normalize=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "7b80db9b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T08:48:19.945673Z",
     "iopub.status.busy": "2024-05-17T08:48:19.944923Z",
     "iopub.status.idle": "2024-05-17T08:48:19.954441Z",
     "shell.execute_reply": "2024-05-17T08:48:19.953226Z"
    },
    "papermill": {
     "duration": 0.026227,
     "end_time": "2024-05-17T08:48:19.956083",
     "exception": false,
     "start_time": "2024-05-17T08:48:19.929856",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Gender\n",
       "Man      0.641342\n",
       "Woman    0.358658\n",
       "Name: proportion, dtype: float64"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data0[data0['Clustering_Kmeans_Exp1_3']==1]['Gender'].value_counts(normalize=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "27630be6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T08:48:19.986562Z",
     "iopub.status.busy": "2024-05-17T08:48:19.986238Z",
     "iopub.status.idle": "2024-05-17T08:48:20.006059Z",
     "shell.execute_reply": "2024-05-17T08:48:20.005179Z"
    },
    "papermill": {
     "duration": 0.036741,
     "end_time": "2024-05-17T08:48:20.007608",
     "exception": false,
     "start_time": "2024-05-17T08:48:19.970867",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Age</th>\n",
       "      <th>Number of children</th>\n",
       "      <th>Total_Ownership_Product</th>\n",
       "      <th>Total_Relationship_Balance</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>2815.000000</td>\n",
       "      <td>2815.000000</td>\n",
       "      <td>2815.000000</td>\n",
       "      <td>2.815000e+03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>43.974778</td>\n",
       "      <td>1.267140</td>\n",
       "      <td>3.156306</td>\n",
       "      <td>2.387517e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>3.911567</td>\n",
       "      <td>1.470041</td>\n",
       "      <td>1.035137</td>\n",
       "      <td>1.438136e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>37.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.587496e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>41.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.199530e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>44.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>2.321194e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>47.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>3.472231e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>50.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>7.259942e+08</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               Age  Number of children  Total_Ownership_Product  \\\n",
       "count  2815.000000         2815.000000              2815.000000   \n",
       "mean     43.974778            1.267140                 3.156306   \n",
       "std       3.911567            1.470041                 1.035137   \n",
       "min      37.000000            0.000000                 1.000000   \n",
       "25%      41.000000            0.000000                 2.000000   \n",
       "50%      44.000000            1.000000                 3.000000   \n",
       "75%      47.000000            2.000000                 4.000000   \n",
       "max      50.000000            4.000000                 6.000000   \n",
       "\n",
       "       Total_Relationship_Balance  \n",
       "count                2.815000e+03  \n",
       "mean                 2.387517e+08  \n",
       "std                  1.438136e+08  \n",
       "min                  1.587496e+06  \n",
       "25%                  1.199530e+08  \n",
       "50%                  2.321194e+08  \n",
       "75%                  3.472231e+08  \n",
       "max                  7.259942e+08  "
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data0[data0['Clustering_Kmeans_Exp1_3']==2][['Age', 'Number of children', 'Total_Ownership_Product', 'Total_Relationship_Balance']].describe(include='all')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "8cfdc668",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T08:48:20.039549Z",
     "iopub.status.busy": "2024-05-17T08:48:20.038687Z",
     "iopub.status.idle": "2024-05-17T08:48:20.047448Z",
     "shell.execute_reply": "2024-05-17T08:48:20.046589Z"
    },
    "papermill": {
     "duration": 0.026331,
     "end_time": "2024-05-17T08:48:20.049012",
     "exception": false,
     "start_time": "2024-05-17T08:48:20.022681",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Area\n",
       "Jakarta     0.480284\n",
       "Bandung     0.161634\n",
       "Surabaya    0.133925\n",
       "Solo        0.116519\n",
       "Jogja       0.081705\n",
       "Bogor       0.025933\n",
       "Name: proportion, dtype: float64"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data0[data0['Clustering_Kmeans_Exp1_3']==2]['Area'].value_counts(normalize=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "f1ca40de",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T08:48:20.081044Z",
     "iopub.status.busy": "2024-05-17T08:48:20.080486Z",
     "iopub.status.idle": "2024-05-17T08:48:20.088004Z",
     "shell.execute_reply": "2024-05-17T08:48:20.087436Z"
    },
    "papermill": {
     "duration": 0.025095,
     "end_time": "2024-05-17T08:48:20.089376",
     "exception": false,
     "start_time": "2024-05-17T08:48:20.064281",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Vintage\n",
       "23 years     0.507282\n",
       "< 1 Year     0.294494\n",
       "> 4 Years    0.198224\n",
       "Name: proportion, dtype: float64"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data0[data0['Clustering_Kmeans_Exp1_3']==2]['Vintage'].value_counts(normalize=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "dbfac4d4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T08:48:20.120269Z",
     "iopub.status.busy": "2024-05-17T08:48:20.120007Z",
     "iopub.status.idle": "2024-05-17T08:48:20.126676Z",
     "shell.execute_reply": "2024-05-17T08:48:20.126143Z"
    },
    "papermill": {
     "duration": 0.023684,
     "end_time": "2024-05-17T08:48:20.128076",
     "exception": false,
     "start_time": "2024-05-17T08:48:20.104392",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Education\n",
       "Bachelor              0.271403\n",
       "elementary school     0.185435\n",
       "SENIOR HIGH SCHOOL    0.180462\n",
       "JUNIOR HIGH SCHOOL    0.098046\n",
       "Masters               0.090941\n",
       "Doctor                0.088455\n",
       "No formal school      0.085258\n",
       "Name: proportion, dtype: float64"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data0[data0['Clustering_Kmeans_Exp1_3']==2]['Education'].value_counts(normalize=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "fe68c017",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-17T08:48:20.158655Z",
     "iopub.status.busy": "2024-05-17T08:48:20.158273Z",
     "iopub.status.idle": "2024-05-17T08:48:20.164817Z",
     "shell.execute_reply": "2024-05-17T08:48:20.164289Z"
    },
    "papermill": {
     "duration": 0.023492,
     "end_time": "2024-05-17T08:48:20.166265",
     "exception": false,
     "start_time": "2024-05-17T08:48:20.142773",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Gender\n",
       "Man      0.671758\n",
       "Woman    0.328242\n",
       "Name: proportion, dtype: float64"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data0[data0['Clustering_Kmeans_Exp1_3']==2]['Gender'].value_counts(normalize=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e8b82632",
   "metadata": {
    "papermill": {
     "duration": 0.014869,
     "end_time": "2024-05-17T08:48:20.196579",
     "exception": false,
     "start_time": "2024-05-17T08:48:20.181710",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 5025736,
     "sourceId": 8437469,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30698,
   "isGpuEnabled": false,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 25.407529,
   "end_time": "2024-05-17T08:48:20.729548",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-05-17T08:47:55.322019",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
